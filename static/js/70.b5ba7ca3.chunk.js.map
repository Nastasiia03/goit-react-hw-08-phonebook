{"version":3,"file":"static/js/70.b5ba7ca3.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/selectors.js","components/ContactForm/ContactForm.js","components/Contact/Contact.styled.js","components/Contact/Contact.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form as FormikForm, Field as FormikField} from 'formik';\n\nexport const Form = styled(FormikForm)`\nwidth: 350px;\ndisplay: flex;\nflex-direction: column;\npadding: 20px;\nborder: 1px solid #2a2a2a;\ngap: 20px;\nmargin-bottom: 10px;\n`\n\nexport const FormField = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nexport const Field = styled(FormikField)`\nwidth: 170px;\nheight: 20px;\nborder: 1px solid #c9c7c7;\n`\n\nexport const Button = styled.button`\nwidth: 100px;\nheight: 25px;\nbackground-color: #FAFBFC;\nborder: 1px solid #878787;\nborder-radius: 6px;\nbox-shadow: rgba(27, 31, 35, 0.04) 0 1px 0, rgba(255, 255, 255, 0.25) 0 1px 0 inset;\ncolor: #24292E;\ncursor: pointer;\nfont-size: 14px;\nfont-weight: 500;\n&:hover {\n  background-color: #8cb6fa;\n}\n`\n\nexport const ErrorMessage = styled.span`\n  color: red;\n  font-size: 12px;\n`;","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filterName) => {\n        if (filterName !== \"\") {\n           return contacts.filter((contact => contact.name.toLowerCase().includes(filterName.toLowerCase())));\n        };\n        return contacts;\n        \n    }\n);\n\n","import { Formik } from 'formik';\nimport { Button, ErrorMessage, Field, Form, FormField } from './ContactForm.styled';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selectors';\n\nfunction validateName(value) {\n   let error;\n   if (!value) {\n     error = 'Required';\n   } else if (!/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/i.test(value)) {\n     error = 'Invalid name';\n   }\n   return error;\n }\n \n function validateNumber(value) {\n   let error;\n   if (!value) {\n     error = 'Required';\n   } else if (!/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/i.test(value)) {\n     error = 'Invalid number';\n   }\n   return error;\n }\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n    return (\n    <Formik\n        initialValues={{ name: \"\", number: \"\" }}\n        onSubmit={(values, actions) => {\n          const sameName = contacts.find(contact => contact.name.toLowerCase().includes(values.name.toLowerCase()));\n          if (sameName) {\n            alert(`${values.name} is already in contacts`)\n          } else {\n            dispatch(addContact(values));\n          };\n          \n          actions.resetForm();\n         \n            }}>\n    {({ errors, touched }) => {\n          return (\n            <Form>\n              <FormField>\n                Name\n                <Field name=\"name\" type=\"text\" validate={validateName} />\n                {errors.name && touched.name && <ErrorMessage>{errors.name}</ErrorMessage>}\n              </FormField>\n              <FormField>\n                Number\n                <Field name=\"number\" type=\"tel\" validate={validateNumber} />\n                {errors.number && touched.number && <ErrorMessage>{errors.number}</ErrorMessage>}\n              </FormField>\n\n              <Button type=\"submit\">Add contact</Button>\n            </Form>\n          );\n        }}\n    </Formik>\n  )\n}\n\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\ndisplay: flex;\ngap: 10px;\nalign-items: center;\n\n`\n\nexport const Button = styled.button`\nwidth: 60px;\nheight: 25px;\nbackground-color: #FAFBFC;\nborder: 1px solid #878787;\nborder-radius: 6px;\nbox-shadow: rgba(27, 31, 35, 0.04) 0 1px 0, rgba(255, 255, 255, 0.25) 0 1px 0 inset;\ncolor: #24292E;\ncursor: pointer;\nfont-size: 12px;\nfont-weight: 500;\n&:hover {\n  background-color: #8cb6fa;\n}\n`","import { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"redux/operations\";\nimport { Button, Item } from \"./Contact.styled\";\nimport PropTypes from \"prop-types\";\n\nexport const Contact = ({ contact: {name, number, id}}) => {\n    const dispatch = useDispatch();\n\n    const handleDelete = () => dispatch(deleteContact(id))\n\n    return (\n        <Item>\n            <p>&#9742; {name} {number}</p>\n            <Button type=\"button\" onClick={handleDelete}>Delete</Button>\n    </Item>\n)\n}\n\nContact.propTypes = {\n    contact: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired, \n        id: PropTypes.string.isRequired,\n    }).isRequired\n}","import { useSelector } from \"react-redux\";\nimport { Contact } from \"components/Contact/Contact\";\nimport { selectVisibleContacts } from \"redux/selectors\";\n\n\nexport const ContactList = () => {\n    const visibleContacts = useSelector(selectVisibleContacts);\n    \n    \n\n    return (\n        <ul>\n            {visibleContacts.map(contact => (<Contact contact={contact} key={contact.id} />))}\n      </ul>\n  )  \n}\n\n\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\nwidth: 200px;\nheight: 25px;\nborder: 1px solid #c9c7c7;\n`","import { useDispatch, useSelector } from \"react-redux\";\nimport { FormField } from \"components/ContactForm/ContactForm.styled\";\nimport { Input } from \"./Filter.styled\";\nimport { handleFilter } from \"redux/filtersSlice\";\nimport { selectFilter } from \"redux/selectors\";\n\n\nexport const Filter = () => {\nconst dispatch = useDispatch();\n    const filter = useSelector(selectFilter);\n    \n    \n   \n\n    return (\n        <FormField>\n            Find contacts by name\n            <Input type=\"text\" value={filter} onChange={(e) => dispatch(handleFilter(e.target.value))}></Input>\n        </FormField>\n    )\n}\n\n","import { ContactForm } from \"components/ContactForm/ContactForm\";\r\nimport { ContactList } from \"components/ContactList/ContactList\";\r\nimport { Filter } from \"components/Filter/Filter\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectError, selectIsLoading } from \"redux/selectors\";\r\nimport { fetchContacts } from \"redux/operations\";\r\n\r\n\r\n const Contacts = () => {\r\n    const dispatch = useDispatch();\r\n    const isLoading = useSelector(selectIsLoading);\r\n    const error = useSelector(selectError);\r\n  \r\n\r\n    useEffect(() => {\r\n        dispatch(fetchContacts())\r\n        \r\n    }, [dispatch])\r\n\r\n    return <><h1>Phonebook</h1>\r\n        <ContactForm  />\r\n        {isLoading && !error && <b>Request in progress...</b>}\r\n        {!isLoading && <><h2>Contacts</h2><Filter /><ContactList /></>}</>\r\n}\r\n\r\nexport default Contacts;"],"names":["Form","styled","FormikForm","FormField","Field","FormikField","Button","ErrorMessage","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectVisibleContacts","createSelector","filterName","contact","name","toLowerCase","includes","validateName","value","test","validateNumber","ContactForm","useSelector","dispatch","useDispatch","initialValues","number","onSubmit","values","actions","find","alert","addContact","resetForm","errors","touched","type","validate","Item","Contact","id","onClick","deleteContact","ContactList","visibleContacts","map","Input","Filter","onChange","e","handleFilter","target","useEffect","fetchContacts"],"sourceRoot":""}